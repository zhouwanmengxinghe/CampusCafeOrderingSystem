@using CampusCafeOrderingSystem.Models
@inject CampusCafeOrderingSystem.Services.IOrderService OrderService
@{
    ViewData["Title"] = "Business Reports";
}

<div class="reports-container">
    <div class="page-header">
        <h1><i class="fas fa-chart-bar"></i> Business Reports</h1>
        <div class="header-actions">
            <button class="btn btn-success" onclick="exportToExcel()">
                <i class="fas fa-file-excel"></i> Export Excel
            </button>
            <button class="btn btn-danger" onclick="exportToPDF()">
                <i class="fas fa-file-pdf"></i> Export PDF
            </button>
        </div>
    </div>

    <!-- Report Filters -->
    <div class="report-filters">
        <div class="filter-group">
            <label>Report Type:</label>
            <select id="reportType" class="form-select" onchange="changeReportType()">
                <option value="daily">Daily Report</option>
                <option value="weekly">Weekly Report</option>
                <option value="monthly">Monthly Report</option>
                <option value="custom">Custom Period</option>
            </select>
        </div>
        <div class="filter-group" id="dateRangeGroup">
            <label>Date Range:</label>
            <input type="date" id="startDate" class="form-control">
            <span>to</span>
            <input type="date" id="endDate" class="form-control">
        </div>
        <div class="filter-group">
            <button class="btn btn-primary" onclick="generateReport()">
                <i class="fas fa-sync-alt"></i> Generate Report
            </button>
        </div>
        <div class="filter-group">
            <button class="btn btn-secondary" onclick="refreshData()">
                <i class="fas fa-redo"></i> Refresh Data
            </button>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="loading-indicator" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Generating report...</p>
    </div>

    <!-- Report Overview -->
    <div class="report-overview">
        <div class="overview-card">
            <div class="card-icon revenue">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="card-content">
                <h3 id="totalRevenue">$0</h3>
                <p>Total Revenue</p>
                <small class="text-muted">Last updated: <span id="lastUpdate">Never</span></small>
            </div>
        </div>
        <div class="overview-card">
            <div class="card-icon orders">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="card-content">
                <h3 id="totalOrders">0</h3>
                <p>Total Orders</p>
                <small class="text-muted">Orders processed</small>
            </div>
        </div>
        <div class="overview-card">
            <div class="card-icon average">
                <i class="fas fa-calculator"></i>
            </div>
            <div class="card-content">
                <h3 id="avgOrderValue">$0</h3>
                <p>Average Order Value</p>
                <small class="text-muted">Per order</small>
            </div>
        </div>
        <div class="overview-card">
            <div class="card-icon product">
                <i class="fas fa-trophy"></i>
            </div>
            <div class="card-content">
                <h3 id="topProduct">-</h3>
                <p>Best Selling Item</p>
                <small class="text-muted">Most popular</small>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="charts-section">
        <div class="chart-container">
            <h3><i class="fas fa-line-chart"></i> Sales Trend</h3>
            <div class="chart-export-btn">
                <button class="btn btn-sm btn-outline-primary" onclick="exportChart('salesChart')">
                    <i class="fas fa-download"></i> Export
                </button>
            </div>
            <canvas id="salesChart"></canvas>
        </div>
        <div class="chart-container">
            <h3><i class="fas fa-pie-chart"></i> Popular Items</h3>
            <div class="chart-export-btn">
                <button class="btn btn-sm btn-outline-primary" onclick="exportChart('popularItemsChart')">
                    <i class="fas fa-download"></i> Export
                </button>
            </div>
            <canvas id="popularItemsChart"></canvas>
        </div>
    </div>
</div>

<style>
.reports-container {
    padding: 20px;
    background: #F9F9F9;
    min-height: 100vh;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    background: white;
    color: #333;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
}

.page-header h1 {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 0;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.page-header h1 i {
    margin-right: 10px;
}

.header-actions {
    display: flex;
    gap: 12px;
}

.header-actions .btn {
    padding: 10px 20px;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.header-actions .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
}

.report-filters {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    margin-bottom: 30px;
    display: flex;
    gap: 25px;
    flex-wrap: wrap;
    align-items: end;
    border: 1px solid #e9ecef;
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
    min-width: 160px;
}

.filter-group label {
    font-size: 14px;
    font-weight: 600;
    color: #495057;
    margin-bottom: 5px;
}

.filter-group select,
.filter-group input {
    padding: 10px 15px;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    background: white;
}

.filter-group select:focus,
.filter-group input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.loading-indicator {
    text-align: center;
    padding: 40px;
    background: white;
    border-radius: 12px;
    margin-bottom: 30px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
}

.loading-indicator p {
    margin-top: 15px;
    color: #6c757d;
    font-weight: 500;
}

.report-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.overview-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    display: flex;
    align-items: center;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    border: 1px solid #e9ecef;
}

.overview-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
}

.overview-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    transform: scaleY(0);
    transition: transform 0.3s ease;
}

.overview-card:hover::before {
    transform: scaleY(1);
}

.card-icon {
    width: 70px;
    height: 70px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 28px;
    margin-right: 20px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}

.card-icon.revenue {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
}

.card-icon.orders {
    background: linear-gradient(135deg, #007bff 0%, #6610f2 100%);
}

.card-icon.average {
    background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
}

.card-icon.product {
    background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);
}

.card-content h3 {
    margin: 0 0 5px 0;
    font-size: 28px;
    font-weight: 700;
    color: #212529;
}

.card-content p {
    margin: 0 0 5px 0;
    color: #495057;
    font-size: 16px;
    font-weight: 600;
}

.card-content small {
    font-size: 12px;
    color: #6c757d;
}

.charts-section {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 30px;
}

.chart-container {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    border: 1px solid #e9ecef;
}

.chart-container:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
}

.chart-container h3 {
    margin-bottom: 20px;
    color: #333;
    font-size: 18px;
    font-weight: 600;
    padding-bottom: 15px;
    border-bottom: 2px solid #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.chart-container h3 i {
    margin-right: 10px;
    color: #4CAF50;
}

.chart-export-btn {
    margin-left: auto;
}

.chart-export-btn .btn {
    padding: 5px 12px;
    font-size: 12px;
    border-radius: 6px;
}



.btn {
    padding: 10px 20px;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
}

.btn-primary {
    background: #4CAF50;
    border-color: #4CAF50;
    color: white;
}

.btn-primary:hover {
    background: #45a049;
    border-color: #45a049;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);
}

@@media (max-width: 768px) {
    .reports-container {
        padding: 15px;
    }
    
    .charts-section {
        grid-template-columns: 1fr;
    }
    
    .report-filters {
        flex-direction: column;
        padding: 20px;
    }
    
    .filter-group {
        min-width: auto;
    }
    
    .page-header {
        flex-direction: column;
        gap: 15px;
        text-align: center;
        padding: 20px;
    }
    
    .report-overview {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .overview-card {
        padding: 20px;
    }
    
    .card-icon {
        width: 60px;
        height: 60px;
        font-size: 24px;
        margin-right: 15px;
    }
    
    .card-content h3 {
        font-size: 24px;
    }
}
</style>

<!-- Include required libraries -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

<script>
// Global variables
let salesChart, popularItemsChart;
let reportData = {};
let signalRConnection;

// Initialize page when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    console.log('Reports page initializing...');
    initializePage();
    initializeSignalR();
    generateReport();
});

// Initialize page components
function initializePage() {
    console.log('Initializing page components...');
    
    // Set default date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('startDate').value = today;
    document.getElementById('endDate').value = today;
    
    // Initialize charts
    initializeCharts();
    
    console.log('Page initialization completed');
}

// Initialize SignalR connection
function initializeSignalR() {
    try {
        console.log('Initializing SignalR connection...');
        
        signalRConnection = new signalR.HubConnectionBuilder()
            .withUrl("/orderHub")
            .build();
        
        // Listen for new order events (disabled to prevent constant table updates)
        // signalRConnection.on("NewOrder", function (orderData) {
        //     console.log('New order received for reports:', orderData);
        //     setTimeout(() => {
        //         generateReport();
        //     }, 1000);
        // });
        
        // Listen for order status update events (disabled to prevent constant table updates)
        // signalRConnection.on("OrderStatusUpdated", function (orderData) {
        //     console.log('Order status updated for reports:', orderData);
        //     setTimeout(() => {
        //         generateReport();
        //     }, 1000);
        // });
        
        // Start connection
        signalRConnection.start().then(function () {
            console.log("SignalR connection established for Reports");
            
            // Get current merchant email and join merchant group
            fetch('/api/account/current-user')
                .then(response => response.json())
                .then(data => {
                    if (data.email) {
                        signalRConnection.invoke("JoinMerchantGroup", data.email);
                    }
                })
                .catch(err => console.error('Failed to get user info:', err));
        }).catch(function (err) {
            console.error("SignalR connection failed for Reports:", err);
        });
    } catch (error) {
        console.error('SignalR initialization failed:', error);
    }
}

// Initialize all charts
function initializeCharts() {
    console.log('Initializing charts...');
    
    try {
        // Sales trend chart
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        salesChart = new Chart(salesCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Sales',
                    data: [],
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // Popular items chart
        const popularCtx = document.getElementById('popularItemsChart').getContext('2d');
        popularItemsChart = new Chart(popularCtx, {
            type: 'doughnut',
            data: {
                labels: [],
                datasets: [{
                    data: [],
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB',
                        '#FFCE56',
                        '#4BC0C0',
                        '#9966FF'
                    ]
                }]
            },
            options: {
                responsive: true
            }
        });
        
        console.log('Charts initialized successfully');
    } catch (error) {
        console.error('Failed to initialize charts:', error);
    }
}

// Change report type and update date range
function changeReportType() {
    const reportType = document.getElementById('reportType').value;
    const today = new Date();
    let startDate, endDate;
    
    console.log('Changing report type to:', reportType);
    
    switch (reportType) {
        case 'daily':
            startDate = endDate = today.toISOString().split('T')[0];
            break;
        case 'weekly':
            const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));
            startDate = weekStart.toISOString().split('T')[0];
            endDate = new Date().toISOString().split('T')[0];
            break;
        case 'monthly':
            const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
            startDate = monthStart.toISOString().split('T')[0];
            endDate = new Date().toISOString().split('T')[0];
            break;
        case 'custom':
            return; // Keep current selected dates
    }
    
    document.getElementById('startDate').value = startDate;
    document.getElementById('endDate').value = endDate;
    
    // Auto-generate report for non-custom types
    if (reportType !== 'custom') {
        generateReport();
    }
}

// Main function to generate report
async function generateReport() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    
    console.log('Generating report for dates:', startDate, 'to', endDate);
    
    if (!startDate || !endDate) {
        alert('Please select date range');
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        alert('Start date cannot be later than end date');
        return;
    }
    
    try {
        showLoading(true);
        
        // Load report data
        await loadReportData(startDate, endDate);
        console.log('Report data loaded:', reportData);
        
        // Update all components
        updateOverviewCards();
        updateCharts();
        updateLastUpdateTime();
        
        showLoading(false);
        console.log('Report generation completed successfully');
        
    } catch (error) {
        console.error('Failed to generate report:', error);
        alert('Failed to generate report: ' + error.message);
        showLoading(false);
    }
}

// Load report data (using sample data for now)
async function loadReportData(startDate, endDate) {
    try {
        console.log('Loading report data...');
        
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Generate comprehensive sample data
        reportData = generateSampleReportData(startDate, endDate);
        
        console.log('Report data loaded successfully');
        
    } catch (error) {
        console.error('Failed to load report data:', error);
        throw error;
    }
}

// Generate comprehensive sample data
function generateSampleReportData(startDate, endDate) {
    const start = new Date(startDate);
    const end = new Date(endDate);
    const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
    const maxDays = Math.min(days, 30);
    
    console.log('Generating sample data for', maxDays, 'days');
    
    // Generate daily data
    const dailyData = [];
    for (let i = 0; i < maxDays; i++) {
        const currentDate = new Date(start);
        currentDate.setDate(start.getDate() + i);
        
        const orders = Math.floor(Math.random() * 50) + 20;
        const revenue = orders * (Math.random() * 30 + 15);
        const avgOrder = revenue / orders;
        const growth = (Math.random() - 0.5) * 20;
        
        dailyData.push({
            date: currentDate.toISOString().split('T')[0],
            orders: orders,
            revenue: revenue,
            avgOrder: avgOrder,
            growth: growth
        });
    }
    
    // Calculate totals
    const totalOrders = dailyData.reduce((sum, day) => sum + day.orders, 0);
    const totalRevenue = dailyData.reduce((sum, day) => sum + day.revenue, 0);
    const avgOrderValue = totalRevenue / totalOrders;
    
    // Sample product data
    const products = [
        { name: 'Cappuccino', quantity: 156, revenue: 780 },
        { name: 'Latte', quantity: 134, revenue: 670 },
        { name: 'Americano', quantity: 98, revenue: 490 },
        { name: 'Espresso', quantity: 87, revenue: 435 },
        { name: 'Mocha', quantity: 76, revenue: 456 },
        { name: 'Macchiato', quantity: 65, revenue: 390 },
        { name: 'Frappuccino', quantity: 54, revenue: 324 }
    ];
    
    // Calculate percentages
    const totalProductRevenue = products.reduce((sum, p) => sum + p.revenue, 0);
    const productRanking = products.map((product, index) => ({
        rank: index + 1,
        name: product.name,
        quantity: product.quantity,
        revenue: product.revenue,
        percentage: ((product.revenue / totalProductRevenue) * 100).toFixed(1)
    }));
    
    // Sample category data
    const categories = [
        { name: 'Coffee', revenue: 2500, percentage: 45.5 },
        { name: 'Tea', revenue: 1200, percentage: 21.8 },
        { name: 'Pastries', revenue: 800, percentage: 14.5 },
        { name: 'Sandwiches', revenue: 600, percentage: 10.9 },
        { name: 'Desserts', revenue: 400, percentage: 7.3 }
    ];
    
    // Sample hourly data
    const hourlyData = [
        { hour: '08:00-09:00', orders: 45, revenue: 225, percentage: 15.2 },
        { hour: '09:00-10:00', orders: 38, revenue: 190, percentage: 12.8 },
        { hour: '10:00-11:00', orders: 42, revenue: 210, percentage: 14.2 },
        { hour: '11:00-12:00', orders: 35, revenue: 175, percentage: 11.8 },
        { hour: '12:00-13:00', orders: 55, revenue: 275, percentage: 18.6 },
        { hour: '13:00-14:00', orders: 48, revenue: 240, percentage: 16.2 },
        { hour: '14:00-15:00', orders: 32, revenue: 160, percentage: 10.8 }
    ];
    
    return {
        overview: {
            totalRevenue: totalRevenue,
            totalOrders: totalOrders,
            avgOrderValue: avgOrderValue,
            topProduct: productRanking[0].name
        },
        dailyData: dailyData,
        productRanking: productRanking,
        categories: categories,
        hourlyAnalysis: hourlyData
    };
}

// Update overview cards
function updateOverviewCards() {
    console.log('Updating overview cards...');
    
    try {
        const overview = reportData.overview;
        
        document.getElementById('totalRevenue').textContent = '$' + overview.totalRevenue.toFixed(2);
        document.getElementById('totalOrders').textContent = overview.totalOrders;
        document.getElementById('avgOrderValue').textContent = '$' + overview.avgOrderValue.toFixed(2);
        document.getElementById('topProduct').textContent = overview.topProduct;
        
        console.log('Overview cards updated successfully');
    } catch (error) {
        console.error('Failed to update overview cards:', error);
    }
}

// Update all charts
function updateCharts() {
    console.log('Updating charts...');
    
    try {
        // Use fake sales data (same as Dashboard)
        const fakeSalesData = {
            labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
            data: [320, 450, 380, 520, 680, 890, 750]
        };
        
        salesChart.data.labels = fakeSalesData.labels;
        salesChart.data.datasets[0].data = fakeSalesData.data;
        salesChart.update();
        
        // Use fake popular items data (same as Dashboard)
        const fakePopularData = {
            labels: ['Cappuccino', 'Latte', 'Americano', 'Espresso', 'Mocha'],
            data: [35, 28, 22, 18, 15]
        };
        
        popularItemsChart.data.labels = fakePopularData.labels;
        popularItemsChart.data.datasets[0].data = fakePopularData.data;
        popularItemsChart.update();
        
        console.log('Charts updated successfully');
    } catch (error) {
        console.error('Failed to update charts:', error);
    }
}



// Update last update time
function updateLastUpdateTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString();
    document.getElementById('lastUpdate').textContent = timeString;
}

// Show/hide loading indicator
function showLoading(show) {
    const loadingIndicator = document.getElementById('loadingIndicator');
    loadingIndicator.style.display = show ? 'block' : 'none';
}

// Export chart function
function exportChart(chartId) {
    console.log('Exporting chart:', chartId);
    
    try {
        let chart;
        if (chartId === 'salesChart') {
            chart = salesChart;
        } else if (chartId === 'popularItemsChart') {
            chart = popularItemsChart;
        } else {
            alert('Chart not found');
            return;
        }
        
        // Create download link
        const url = chart.toBase64Image();
        const link = document.createElement('a');
        link.download = `${chartId}_${new Date().toISOString().split('T')[0]}.png`;
        link.href = url;
        link.click();
        
        console.log('Chart exported successfully');
    } catch (error) {
        console.error('Failed to export chart:', error);
        alert('Failed to export chart: ' + error.message);
    }
}

// Export to Excel
function exportToExcel() {
    console.log('Exporting to Excel...');
    
    try {
        const wb = XLSX.utils.book_new();
        
        // Create overview sheet
        const overviewData = [
            ['Metric', 'Value'],
            ['Total Revenue', '$' + reportData.overview.totalRevenue.toFixed(2)],
            ['Total Orders', reportData.overview.totalOrders],
            ['Average Order Value', '$' + reportData.overview.avgOrderValue.toFixed(2)],
            ['Top Product', reportData.overview.topProduct]
        ];
        const overviewWS = XLSX.utils.aoa_to_sheet(overviewData);
        XLSX.utils.book_append_sheet(wb, overviewWS, 'Overview');
        
        // Create daily data sheet
        const dailyData = [['Date', 'Orders', 'Revenue', 'Avg Order Value', 'Growth Rate']];
        reportData.dailyData.forEach(day => {
            dailyData.push([
                day.date,
                day.orders,
                day.revenue.toFixed(2),
                day.avgOrder.toFixed(2),
                day.growth.toFixed(1) + '%'
            ]);
        });
        const dailyWS = XLSX.utils.aoa_to_sheet(dailyData);
        XLSX.utils.book_append_sheet(wb, dailyWS, 'Daily Data');
        
        // Create product ranking sheet
        const productData = [['Rank', 'Product Name', 'Quantity Sold', 'Sales Amount', 'Percentage']];
        reportData.productRanking.forEach(product => {
            productData.push([
                product.rank,
                product.name,
                product.quantity,
                product.revenue.toFixed(2),
                product.percentage + '%'
            ]);
        });
        const productWS = XLSX.utils.aoa_to_sheet(productData);
        XLSX.utils.book_append_sheet(wb, productWS, 'Product Ranking');
        
        // Save file
        const fileName = `Business_Report_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, fileName);
        
        console.log('Excel export completed');
        alert('Report exported to Excel successfully!');
        
    } catch (error) {
        console.error('Failed to export to Excel:', error);
        alert('Failed to export to Excel: ' + error.message);
    }
}

// Export to PDF
function exportToPDF() {
    console.log('Exporting to PDF...');
    
    try {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        
        // Add title
        doc.setFontSize(20);
        doc.text('Business Report', 20, 30);
        
        // Add date range
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        doc.setFontSize(12);
        doc.text(`Period: ${startDate} to ${endDate}`, 20, 45);
        
        // Add overview data
        doc.setFontSize(16);
        doc.text('Overview', 20, 65);
        
        doc.setFontSize(12);
        let yPos = 80;
        doc.text(`Total Revenue: $${reportData.overview.totalRevenue.toFixed(2)}`, 20, yPos);
        yPos += 10;
        doc.text(`Total Orders: ${reportData.overview.totalOrders}`, 20, yPos);
        yPos += 10;
        doc.text(`Average Order Value: $${reportData.overview.avgOrderValue.toFixed(2)}`, 20, yPos);
        yPos += 10;
        doc.text(`Top Product: ${reportData.overview.topProduct}`, 20, yPos);
        
        // Add product ranking
        yPos += 30;
        doc.setFontSize(16);
        doc.text('Top Products', 20, yPos);
        
        yPos += 15;
        doc.setFontSize(10);
        reportData.productRanking.slice(0, 5).forEach((product, index) => {
            doc.text(`${index + 1}. ${product.name} - ${product.quantity} units - $${product.revenue.toFixed(2)}`, 20, yPos);
            yPos += 8;
        });
        
        // Save PDF
        const fileName = `Business_Report_${new Date().toISOString().split('T')[0]}.pdf`;
        doc.save(fileName);
        
        console.log('PDF export completed');
        alert('Report exported to PDF successfully!');
        
    } catch (error) {
        console.error('Failed to export to PDF:', error);
        alert('Failed to export to PDF: ' + error.message);
    }
}

// Auto-refresh every 5 minutes (disabled to prevent table growth)
// setInterval(() => {
//     console.log('Auto-refreshing report data...');
//     generateReport();
// }, 5 * 60 * 1000);

// Manual refresh function
function refreshData() {
    console.log('Manually refreshing report data...');
    showLoading(true);
    
    // Simulate loading delay
    setTimeout(() => {
        generateReport();
        showLoading(false);
        updateLastUpdateTime();
    }, 1000);
}

console.log('Reports page script loaded successfully');
</script>