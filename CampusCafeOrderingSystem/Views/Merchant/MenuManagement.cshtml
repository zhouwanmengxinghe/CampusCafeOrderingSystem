@using CampusCafeOrderingSystem.Models
@inject CampusCafeOrderingSystem.Services.IMenuService MenuService
@{
    ViewData["Title"] = "Menu Management";
}

@Html.AntiForgeryToken()

<div class="menu-management-container">
    <div class="page-header">
        <h1>Menu Management</h1>
        <button class="btn btn-primary" onclick="showAddMenuModal()">Add Item</button>
    </div>

    <!-- Search and Filters -->
    <div class="search-filters">
        <div class="search-box">
            <input type="text" id="searchInput" class="form-control" placeholder="Search menu items...">
            <button class="btn btn-outline-secondary" onclick="searchMenuItems()">Search</button>
        </div>
        <div class="filter-box">
            <select id="categoryFilter" class="form-select" onchange="filterByCategory()">
                <option value="">All Categories</option>
                <option value="coffee">Coffee</option>
                <option value="tea">Tea</option>
                <option value="dessert">Dessert</option>
                <option value="snack">Snack</option>
            </select>
            <select id="statusFilter" class="form-select" onchange="filterByStatus()">
                <option value="">All Status</option>
                <option value="available">Available</option>
                <option value="unavailable">Unavailable</option>
            </select>
        </div>
    </div>

    <!-- Menu Grid -->
    <div class="menu-grid" id="menuGrid">
        <!-- Dynamic loading -->
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        <nav>
            <ul class="pagination" id="pagination">
                <!-- Dynamic pagination -->
            </ul>
        </nav>
    </div>
</div>

<!-- Add/Edit Menu Item Modal -->
<div class="modal fade" id="menuModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="menuModalTitle">Add Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="menuForm">
                    <input type="hidden" id="menuId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="menuName" class="form-label">Item Name *</label>
                                <input type="text" class="form-control" id="menuName" required>
                            </div>
                            <div class="mb-3">
                                <label for="menuCategory" class="form-label">Category *</label>
                                <select class="form-select" id="menuCategory" required>
                                    <option value="">Select Category</option>
                                    <option value="coffee">Coffee</option>
                                    <option value="tea">Tea</option>
                                    <option value="dessert">Dessert</option>
                                    <option value="snack">Snack</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="menuPrice" class="form-label">Price *</label>
                                <input type="number" class="form-control" id="menuPrice" step="0.01" min="0" required>
                            </div>
                            <div class="mb-3">
                                <label for="menuStatus" class="form-label">Status</label>
                                <select class="form-select" id="menuStatus">
                                    <option value="available">Available</option>
                                    <option value="unavailable">Unavailable</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="menuDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="menuDescription" rows="3"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="menuImage" class="form-label">Item Image</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="form-control" id="menuImage" accept="image/*" onchange="previewImage(this)" style="display: none;">
                                    <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('menuImage').click()">
                                        <i class="fas fa-upload"></i> Choose File
                                    </button>
                                    <span id="fileNameDisplay" class="file-name-display">No file selected</span>
                                </div>
                                <div class="image-preview" id="imagePreview" style="margin-top: 10px;"></div>
                                <input type="hidden" id="menuImageUrl" value="">
                            </div>
                            <div class="mb-3">
                                <label for="menuIngredients" class="form-label">Main Ingredients</label>
                                <input type="text" class="form-control" id="menuIngredients" placeholder="Separated by commas">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveMenuItem()">Save</button>
            </div>
        </div>
    </div>
</div>

<style>
.menu-management-container {
    padding: 20px;
    background: #F9F9F9;
    min-height: 100vh;
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
}

.search-filters {
    display: flex;
    gap: 20px;
    margin-bottom: 30px;
    flex-wrap: wrap;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
}

.search-box {
    display: flex;
    gap: 10px;
    flex: 1;
    min-width: 300px;
}

.filter-box {
    display: flex;
    gap: 10px;
}

.menu-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
    margin-bottom: 20px;
    gap: 20px;
    margin-bottom: 30px;
}

.menu-item-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    overflow: hidden;
    transition: transform 0.3s ease;
}

.menu-item-card:hover {
    transform: translateY(-5px);
}

.menu-item-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    background: #f8f9fa;
}

.menu-item-image[src*="default-coffee-placeholder.svg"] {
    object-fit: contain;
    padding: 20px;
    background: #f8f9fa;
}

.menu-item-content {
    padding: 15px;
}

.menu-item-header {
    display: flex;
    justify-content: space-between;
    align-items: start;
    margin-bottom: 10px;
}

.menu-item-name {
    font-size: 18px;
    font-weight: bold;
    margin: 0;
}

.menu-item-price {
    font-size: 20px;
    font-weight: bold;
    color: #4CAF50;
}

.menu-item-category {
    display: inline-block;
    padding: 4px 8px;
    background: #E8F5E9;
    color: #4CAF50;
    border-radius: 4px;
    font-size: 12px;
    margin-bottom: 10px;
}

.menu-item-description {
    color: #666;
    font-size: 14px;
    margin-bottom: 15px;
    line-height: 1.4;
}

.menu-item-actions {
    display: flex;
    gap: 10px;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
}

.status-available {
    background: #d4edda;
    color: #155724;
}

.status-unavailable {
    background: #f8d7da;
    color: #721c24;
}

.image-preview {
    margin-top: 10px;
}

.image-preview img {
    max-width: 100%;
    max-height: 200px;
    border-radius: 5px;
}

.pagination-container {
    display: flex;
    justify-content: center;
}

@@media (max-width: 768px) {
    .search-filters {
        flex-direction: column;
    }
    
    .search-box {
        min-width: auto;
    }
    
    .menu-grid {
        grid-template-columns: 1fr;
    }
    
    .page-header {
        flex-direction: column;
        gap: 15px;
    }
}
</style>

<script>
let currentPage = 1;
let totalPages = 1;
let menuItems = [];
let filteredItems = [];
const itemsPerPage = 12;

document.addEventListener('DOMContentLoaded', function() {
    loadMenuItems();
    
    // Image preview
    document.getElementById('menuImage').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('imagePreview').innerHTML = 
                    `<img src="${e.target.result}" alt="Preview">`;
            };
            reader.readAsDataURL(file);
        }
    });
});

async function loadMenuItems() {
    try {
        const response = await fetch('/api/MenuApi?page=1&pageSize=20');
        if (!response.ok) {
            throw new Error('Failed to fetch menu data');
        }
        const apiResponse = await response.json();
        
        if (apiResponse.isSuccess && apiResponse.data && apiResponse.data.items) {
            menuItems = apiResponse.data.items;
        } else if (Array.isArray(apiResponse)) {
            menuItems = apiResponse;
        } else {
            throw new Error(apiResponse.message || 'Invalid response format');
        }
        
        filteredItems = [...menuItems];
        renderMenuItems();
        renderPagination();
    } catch (error) {
        console.error('Failed to load menu items:', error);
        alert('Failed to load menu data, please refresh the page and try again');
    }
}

function renderMenuItems() {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const itemsToShow = filteredItems.slice(startIndex, endIndex);
    
    const menuGrid = document.getElementById('menuGrid');
    menuGrid.innerHTML = itemsToShow.map(item => `
        <div class="menu-item-card">
            <img src="${item.imageUrl || '/images/default-coffee-placeholder.svg'}" alt="${item.name}" class="menu-item-image" 
                 onerror="this.src='/images/default-coffee-placeholder.svg'">
            <div class="menu-item-content">
                <div class="menu-item-header">
                    <h3 class="menu-item-name">${item.name}</h3>
                    <span class="menu-item-price">NZ$${item.price.toFixed(2)}</span>
                </div>
                <span class="menu-item-category">${getCategoryName(item.category)}</span>
                <span class="status-badge status-${item.isAvailable ? 'available' : 'unavailable'}">
                    ${item.isAvailable ? 'Available' : 'Unavailable'}
                </span>
                <p class="menu-item-description">${item.description || ''}</p>
                <div class="menu-item-actions">
                    <button class="btn btn-sm btn-outline-primary" onclick="editMenuItem(${item.id})">
                        Edit
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteMenuItem(${item.id})">
                        Delete
                    </button>
                    <button class="btn btn-sm ${item.isAvailable ? 'btn-warning' : 'btn-success'}" 
                            onclick="toggleMenuStatus(${item.id})">
                        ${item.isAvailable ? 'Disable' : 'Enable'}
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

function renderPagination() {
    totalPages = Math.ceil(filteredItems.length / itemsPerPage);
    const pagination = document.getElementById('pagination');
    
    let paginationHTML = '';
    
    // Previous page
    paginationHTML += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">
                Previous
            </a>
        </li>
    `;
    
    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
        paginationHTML += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
            </li>
        `;
    }
    
    // Next page
    paginationHTML += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">
                Next
            </a>
        </li>
    `;
    
    pagination.innerHTML = paginationHTML;
}

function changePage(page) {
    if (page >= 1 && page <= totalPages) {
        currentPage = page;
        renderMenuItems();
        renderPagination();
    }
}

function getCategoryName(category) {
    const categories = {
        'coffee': 'Coffee',
        'tea': 'Tea',
        'dessert': 'Dessert',
        'snack': 'Snack'
    };
    return categories[category] || category;
}

function showAddMenuModal() {
    document.getElementById('menuModalTitle').textContent = 'Add Menu Item';
    document.getElementById('menuForm').reset();
    document.getElementById('menuId').value = '';
    document.getElementById('imagePreview').innerHTML = '';
    new bootstrap.Modal(document.getElementById('menuModal')).show();
}

function editMenuItem(id) {
    const item = menuItems.find(m => m.id === id);
    if (item) {
        document.getElementById('menuModalTitle').textContent = 'Edit Menu Item';
        document.getElementById('menuId').value = item.id;
        document.getElementById('menuName').value = item.name;
        document.getElementById('menuCategory').value = item.category;
        document.getElementById('menuPrice').value = item.price;
        document.getElementById('menuDescription').value = item.description || '';
        document.getElementById('menuStatus').value = item.isAvailable ? 'available' : 'unavailable';
        document.getElementById('menuIngredients').value = item.ingredients || '';
        
        if (item.imageUrl) {
            document.getElementById('imagePreview').innerHTML = 
                `<img src="${item.imageUrl}" alt="Current Image">`;
        }
        
        new bootstrap.Modal(document.getElementById('menuModal')).show();
    }
}

async function saveMenuItem() {
    const form = document.getElementById('menuForm');
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }
    
    const id = document.getElementById('menuId').value;
    let imageUrl = document.getElementById('menuImageUrl').value || '/images/default-coffee-placeholder.svg';
    
    // Handle image upload
    const imageFile = document.getElementById('menuImage').files[0];
    if (imageFile) {
        try {
            imageUrl = await uploadImage(imageFile);
        } catch (error) {
            alert('Failed to upload image: ' + error.message);
            return;
        }
    }
    
    const menuData = {
        name: document.getElementById('menuName').value,
        category: document.getElementById('menuCategory').value,
        price: parseFloat(document.getElementById('menuPrice').value),
        description: document.getElementById('menuDescription').value || '',
        isAvailable: document.getElementById('menuStatus').value === 'available',
        imageUrl: imageUrl
    };
    
    try {
        let response;
        if (id) {
            // Edit existing menu item
            response = await fetch(`/api/MenuApi/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(menuData)
            });
        } else {
            // Add new menu item
            response = await fetch('/api/MenuApi', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(menuData)
            });
        }
        
        // Unified text reading and attempt to parse as JSON, avoiding parsing exceptions caused by HTML redirects
        const responseText = await response.text();
        let result;
        
        try {
            result = JSON.parse(responseText);
        } catch (parseError) {
            const looksLikeHtml = responseText.trim().startsWith('<');
            const msg = looksLikeHtml ? 'Not logged in or login has expired, please log in again and try.' : 'Server returned non-JSON response';
            throw new Error(msg);
        }
        
        if (!response.ok) {
            const msg = result?.message || result?.error || `Request failed (${response.status})`;
            throw new Error(msg);
        }
        
        // Compatible with both ApiResponse<T> wrapper and raw object returns
        const menuItem = result.data || result;
        
        if (!menuItem) {
            throw new Error(result.message || 'Save failed');
        }
        
        if (!menuItem.id) {
            throw new Error('Did not receive valid return data');
        }
        
        // Update existing menu item (prioritize backend returned data)
        const index = menuItems.findIndex(item => item.id === menuItem.id);
        if (index !== -1) {
            menuItems[index] = { ...menuItems[index], ...menuItem };
        } else {
            // Add new menu item - use the returned complete menu item data
            menuItems.push(menuItem);
        }
        
        // Reapply filters and render
        applyFilters();
        
        // Close modal
        bootstrap.Modal.getInstance(document.getElementById('menuModal')).hide();
        
        alert('Menu item saved successfully!');
    } catch (error) {
        console.error('Failed to save menu item:', error);
        alert('Failed to save menu item: ' + error.message);
    }
}

async function deleteMenuItem(id) {
    if (confirm('Are you sure you want to delete this menu item?')) {
        try {
            const response = await fetch(`/api/MenuApi/${id}`, {
                method: 'DELETE',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to delete menu item');
            }
            
            // Remove menu item from local data
            menuItems = menuItems.filter(item => item.id !== id);
            applyFilters();
            alert('Menu item deleted successfully!');
        } catch (error) {
            console.error('Failed to delete menu item:', error);
            alert('Failed to delete menu item: ' + error.message);
        }
    }
}

async function toggleMenuStatus(id) {
    try {
        const response = await fetch(`/api/MenuApi/${id}/toggle-status`, {
            method: 'PATCH',
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'Failed to update menu item status');
        }
        
        // Update local menu item status
        const menuItem = menuItems.find(item => item.id === id);
        if (menuItem) {
            menuItem.isAvailable = !menuItem.isAvailable;
            applyFilters();
        }
    } catch (error) {
        console.error('Failed to update menu item status:', error);
        alert('Failed to update menu item status: ' + error.message);
    }
}

function searchMenuItems() {
    applyFilters();
}

function filterByCategory() {
    applyFilters();
}

function filterByStatus() {
    applyFilters();
}

function applyFilters() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const categoryFilter = document.getElementById('categoryFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    
    filteredItems = menuItems.filter(item => {
        const matchesSearch = (item.name && item.name.toLowerCase().includes(searchTerm)) ||
                            (item.description && item.description.toLowerCase().includes(searchTerm));
        const matchesCategory = !categoryFilter || item.category === categoryFilter;
        const matchesStatus = !statusFilter || 
                            (statusFilter === 'available' && item.isAvailable) ||
                            (statusFilter === 'unavailable' && !item.isAvailable);
        
        return matchesSearch && matchesCategory && matchesStatus;
    });
    
    currentPage = 1;
    renderMenuItems();
    renderPagination();
}

// Image preview function
function previewImage(input) {
    const preview = document.getElementById('imagePreview');
    const file = input.files[0];
    
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.innerHTML = `
                <div style="position: relative; display: inline-block;">
                    <img src="${e.target.result}" alt="Preview" style="max-width: 200px; max-height: 150px; border-radius: 8px; border: 1px solid #ddd;">
                    <button type="button" onclick="clearImagePreview()" style="position: absolute; top: -8px; right: -8px; background: #dc3545; color: white; border: none; border-radius: 50%; width: 24px; height: 24px; font-size: 12px; cursor: pointer;">&times;</button>
                </div>
            `;
        };
        reader.readAsDataURL(file);
    } else {
        preview.innerHTML = '';
    }
}

// Clear image preview
function clearImagePreview() {
    document.getElementById('menuImage').value = '';
    document.getElementById('imagePreview').innerHTML = '';
    document.getElementById('menuImageUrl').value = '';
}

// Upload image to server
async function uploadImage(file) {
    const formData = new FormData();
    formData.append('file', file);
    
    try {
        const response = await fetch('/api/FileUploadApi/image', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: formData
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'Failed to upload image');
        }
        
        const result = await response.json();
        return result.imageUrl;
    } catch (error) {
        console.error('Failed to upload image:', error);
        throw error;
    }
}
</script>