@using CampusCafeOrderingSystem.Models
@inject CampusCafeOrderingSystem.Services.IMenuService MenuService
@inject CampusCafeOrderingSystem.Services.IOrderService OrderService
@{
    ViewData["Title"] = "Merchant Dashboard";
}

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1>Merchant Dashboard</h1>
        <div class="date-range">
            <input type="date" id="startDate" class="form-control">
            <span>to</span>
            <input type="date" id="endDate" class="form-control">
            <button class="btn btn-primary" onclick="refreshDashboard()">Refresh</button>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="stat-content">
                <h3 id="todayOrders">0</h3>
                <p>Today's Orders</p>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="stat-content">
                <h3 id="todayRevenue">$0</h3>
                <p>Today's Revenue</p>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-utensils"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalMenuItems">0</h3>
                <p>Total Menu Items</p>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-star"></i>
            </div>
            <div class="stat-content">
                <h3 id="avgRating">0.0</h3>
                <p>Average Rating</p>
            </div>
        </div>
    </div>

    <!-- Charts Area -->
    <div class="charts-grid">
        <div class="chart-container">
            <h3>Sales Trend</h3>
            <canvas id="salesChart"></canvas>
        </div>
        <div class="chart-container">
            <h3>Popular Items</h3>
            <canvas id="popularItemsChart"></canvas>
        </div>
    </div>

    <!-- Recent Orders -->
    <div class="recent-orders">
        <h3>Recent Orders</h3>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Order Number</th>
                        <th>Customer</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody id="recentOrdersTable">
                    <!-- Dynamic loading -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
.dashboard-container {
    padding: 20px;
    background: #F9F9F9;
    min-height: 100vh;
}

.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
}

.date-range {
    display: flex;
    align-items: center;
    gap: 10px;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    border: 1px solid #e0e0e0;
    transition: transform 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: #4CAF50;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 24px;
    margin-right: 15px;
    box-shadow: 0 2px 8px rgba(76, 175, 80, 0.2);
}

.stat-content h3 {
    margin: 0;
    font-size: 28px;
    font-weight: bold;
    color: #333;
}

.stat-content p {
    margin: 0;
    color: #666;
    font-size: 14px;
}

.charts-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 30px;
}

.chart-container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
    transition: transform 0.3s ease;
}

.chart-container:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
}

.recent-orders {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
}

@@media (max-width: 768px) {
    .charts-grid {
        grid-template-columns: 1fr;
    }
    
    .dashboard-header {
        flex-direction: column;
        gap: 15px;
    }
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Dashboard data loading and chart initialization
let salesChart, popularItemsChart;

document.addEventListener('DOMContentLoaded', function() {
    initializeDashboard();
    loadDashboardData();
});

function initializeDashboard() {
    // Set default date range
    const today = new Date();
    const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
    document.getElementById('endDate').value = today.toISOString().split('T')[0];
    
    // Initialize charts
    initializeCharts();
}

function initializeCharts() {
    // Sales trend chart
    const salesCtx = document.getElementById('salesChart').getContext('2d');
    salesChart = new Chart(salesCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Sales',
                data: [],
                borderColor: '#667eea',
                backgroundColor: 'rgba(102, 126, 234, 0.1)',
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    
    // Popular items chart
    const popularCtx = document.getElementById('popularItemsChart').getContext('2d');
    popularItemsChart = new Chart(popularCtx, {
        type: 'doughnut',
        data: {
            labels: [],
            datasets: [{
                data: [],
                backgroundColor: [
                    '#FF6384',
                    '#36A2EB',
                    '#FFCE56',
                    '#4BC0C0',
                    '#9966FF'
                ]
            }]
        },
        options: {
            responsive: true
        }
    });
}

async function loadDashboardData() {
    // Load statistics data
    await loadStats();
    // Load chart data
    await loadChartData();
    // Load recent orders
    await loadRecentOrders();
}

async function loadStats() {
    // Use fake data for demonstration
    const fakeStats = {
        todayOrders: 47,
        todayRevenue: 1285.50,
        totalMenuItems: 32,
        avgRating: 4.7
    };
    
    document.getElementById('todayOrders').textContent = fakeStats.todayOrders;
    document.getElementById('todayRevenue').textContent = '$' + fakeStats.todayRevenue.toFixed(2);
    document.getElementById('totalMenuItems').textContent = fakeStats.totalMenuItems;
    document.getElementById('avgRating').textContent = fakeStats.avgRating.toFixed(1);
}

async function loadChartData() {
    // Use fake sales data
    const fakeSalesData = {
        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        data: [320, 450, 380, 520, 680, 890, 750]
    };
    
    salesChart.data.labels = fakeSalesData.labels;
    salesChart.data.datasets[0].data = fakeSalesData.data;
    salesChart.update();
    
    // Use fake popular items data
    const fakePopularData = {
        labels: ['Cappuccino', 'Latte', 'Americano', 'Espresso', 'Mocha'],
        data: [35, 28, 22, 18, 15]
    };
    
    popularItemsChart.data.labels = fakePopularData.labels;
    popularItemsChart.data.datasets[0].data = fakePopularData.data;
    popularItemsChart.update();
}

async function loadRecentOrders() {
    // Use fake recent orders data
    const fakeOrders = [
        {
            orderNumber: 'ORD-2024-001',
            customerName: 'John Smith',
            totalAmount: 15.50,
            status: 'Completed',
            createdAt: new Date(Date.now() - 30 * 60 * 1000) // 30 minutes ago
        },
        {
            orderNumber: 'ORD-2024-002',
            customerName: 'Emily Johnson',
            totalAmount: 22.75,
            status: 'InProgress',
            createdAt: new Date(Date.now() - 15 * 60 * 1000) // 15 minutes ago
        },
        {
            orderNumber: 'ORD-2024-003',
            customerName: 'Michael Brown',
            totalAmount: 8.25,
            status: 'Pending',
            createdAt: new Date(Date.now() - 5 * 60 * 1000) // 5 minutes ago
        },
        {
            orderNumber: 'ORD-2024-004',
            customerName: 'Sarah Davis',
            totalAmount: 31.00,
            status: 'Completed',
            createdAt: new Date(Date.now() - 45 * 60 * 1000) // 45 minutes ago
        },
        {
            orderNumber: 'ORD-2024-005',
            customerName: 'David Wilson',
            totalAmount: 12.50,
            status: 'InProgress',
            createdAt: new Date(Date.now() - 10 * 60 * 1000) // 10 minutes ago
        }
    ];
    
    const tbody = document.getElementById('recentOrdersTable');
    tbody.innerHTML = fakeOrders.map(order => `
        <tr>
            <td>${order.orderNumber}</td>
            <td>${order.customerName}</td>
            <td>$${order.totalAmount.toFixed(2)}</td>
            <td><span class="badge ${getStatusBadgeClass(order.status)}">${getStatusText(order.status)}</span></td>
            <td>${order.createdAt.toLocaleTimeString()}</td>
        </tr>
    `).join('');
}

function refreshDashboard() {
    loadDashboardData();
}

// API call functions
async function fetchSalesData() {
    try {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const response = await fetch(`/api/MerchantApi/sales-data?startDate=${startDate}&endDate=${endDate}`);
        if (response.ok) {
            return await response.json();
        }
    } catch (error) {
        console.error('Failed to fetch sales data:', error);
    }
    // Return default data
    return {
        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        data: [0, 0, 0, 0, 0, 0, 0]
    };
}

async function fetchPopularItemsData() {
    try {
        const response = await fetch('/api/MerchantApi/popular-items');
        if (response.ok) {
            return await response.json();
        }
    } catch (error) {
        console.error('Failed to fetch popular items data:', error);
    }
    // Return default data
    return {
        labels: ['No Data'],
        data: [1]
    };
}

// Status helper functions
function getStatusBadgeClass(status) {
    switch (status) {
        case 'Completed': return 'bg-success';
        case 'InProgress': return 'bg-warning';
        case 'Pending': return 'bg-info';
        case 'Cancelled': return 'bg-danger';
        default: return 'bg-secondary';
    }
}

function getStatusText(status) {
    switch (status) {
        case 'Completed': return 'Completed';
        case 'InProgress': return 'In Progress';
        case 'Pending': return 'Pending';
        case 'Cancelled': return 'Cancelled';
        default: return 'Unknown';
    }
}
</script>