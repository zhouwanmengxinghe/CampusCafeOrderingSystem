@model CafeApp.Models.user_order_pay.Order
@{
    ViewData["Title"] = "Order Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="text-primary">
                    <i class="fas fa-receipt"></i> Order Details
                </h2>
                <a asp-action="MyOrders" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Orders
                </a>
            </div>
            
            <!-- Order Info Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Order @Model.OrderNumber</h5>
                        <span class="badge badge-@GetStatusClass(Model.Status) badge-lg">@Model.Status</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="info-item">
                                <i class="fas fa-calendar text-primary"></i>
                                <div class="info-content">
                                    <strong>Order Date</strong>
                                    <p>@Model.OrderDate.ToString("yyyy-MM-dd HH:mm:ss")</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <i class="fas fa-credit-card text-primary"></i>
                                <div class="info-content">
                                    <strong>Payment Method</strong>
                                    <p>@GetPaymentMethodDisplay(Model.PaymentMethod)</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <i class="fas fa-hashtag text-primary"></i>
                                <div class="info-content">
                                    <strong>Transaction ID</strong>
                                    <p>@Model.TransactionId</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <i class="fas fa-dollar-sign text-success"></i>
                                <div class="info-content">
                                    <strong>Total Amount</strong>
                                    <p class="amount">짜@Model.TotalAmount.ToString("F2")</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (Model.EstimatedCompletionTime.HasValue)
                    {
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="info-item">
                                    <i class="fas fa-clock text-info"></i>
                                    <div class="info-content">
                                        <strong>Estimated Completion</strong>
                                        <p>@Model.EstimatedCompletionTime.Value.ToString("yyyy-MM-dd HH:mm")</p>
                                    </div>
                                </div>
                            </div>
                            @if (Model.CompletedTime.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="info-item">
                                        <i class="fas fa-check-circle text-success"></i>
                                        <div class="info-content">
                                            <strong>Completed Time</strong>
                                            <p>@Model.CompletedTime.Value.ToString("yyyy-MM-dd HH:mm")</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
            
            <!-- Order Items Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-shopping-cart"></i> Order Items (@Model.OrderItems.Count)
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Item</th>
                                    <th class="text-center">Quantity</th>
                                    <th class="text-end">Unit Price</th>
                                    <th class="text-end">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.OrderItems)
                                {
                                    <tr>
                                        <td>
                                            <div class="item-info">
                                                <h6 class="mb-0">@item.MenuItemName</h6>
                                            </div>
                                        </td>
                                        <td class="text-center">
                                            <span class="badge badge-secondary">@item.Quantity</span>
                                        </td>
                                        <td class="text-end">짜@item.UnitPrice.ToString("F2")</td>
                                        <td class="text-end font-weight-bold">짜@item.TotalPrice.ToString("F2")</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot class="table-light">
                                <tr>
                                    <th colspan="3" class="text-end">Total Amount:</th>
                                    <th class="text-end text-success">짜@Model.TotalAmount.ToString("F2")</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            
            <!-- Order Status Progress -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-tasks"></i> Order Progress
                    </h5>
                </div>
                <div class="card-body">
                    <div class="order-progress">
                        @{
                            var statuses = new[] {
                                (CafeApp.Models.user_order_pay.OrderStatus.Confirmed, "Order Confirmed", "fas fa-check-circle"),
                                (CafeApp.Models.user_order_pay.OrderStatus.Preparing, "Preparing", "fas fa-utensils"),
                                (CafeApp.Models.user_order_pay.OrderStatus.Ready, "Ready for Pickup", "fas fa-bell"),
                                (CafeApp.Models.user_order_pay.OrderStatus.Completed, "Completed", "fas fa-thumbs-up")
                            };
                        }
                        
                        @for (int i = 0; i < statuses.Length; i++)
                        {
                            var (status, label, icon) = statuses[i];
                            var isActive = (int)Model.Status >= (int)status;
                            var isCurrent = Model.Status == status;
                            
                            <div class="progress-step @(isActive ? "active" : "") @(isCurrent ? "current" : "")">
                                <div class="step-icon">
                                    <i class="@icon"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="step-title">@label</h6>
                                    @if (isCurrent)
                                    {
                                        <small class="text-primary">Current Status</small>
                                    }
                                </div>
                                @if (i < statuses.Length - 1)
                                {
                                    <div class="step-connector @(isActive ? "active" : "")"></div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="text-center">
                <a asp-action="Track" asp-route-orderNumber="@Model.OrderNumber" class="btn btn-primary me-2">
                    <i class="fas fa-search"></i> Track Order
                </a>
                <a asp-controller="Menu" asp-action="Index" class="btn btn-success">
                    <i class="fas fa-utensils"></i> Order Again
                </a>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusClass(CafeApp.Models.user_order_pay.OrderStatus status)
    {
        return status switch
        {
            CafeApp.Models.user_order_pay.OrderStatus.Pending => "warning",
            CafeApp.Models.user_order_pay.OrderStatus.Confirmed => "info",
            CafeApp.Models.user_order_pay.OrderStatus.Preparing => "primary",
            CafeApp.Models.user_order_pay.OrderStatus.Ready => "success",
            CafeApp.Models.user_order_pay.OrderStatus.Completed => "secondary",
            CafeApp.Models.user_order_pay.OrderStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
    
    string GetPaymentMethodDisplay(string paymentMethod)
    {
        return paymentMethod switch
        {
            "CreditCard" => "Credit/Debit Card",
            "CampusCard" => "Campus Card",
            "MobileWallet" => "Mobile Wallet",
            _ => paymentMethod
        };
    }
}

<style>
:root {
    --primary-green: #4CAF50;
    --light-green: #8BC34A;
    --background-gray: #F9F9F9;
    --text-primary: #333333;
    --text-secondary: #777777;
    --hover-green: #C8E6C9;
}

body {
    background-color: var(--background-gray);
}

.card {
    border: none;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    background-color: white;
}

.card-header {
    background-color: var(--primary-green);
    color: white;
    border-bottom: none;
}

.badge-lg {
    font-size: 0.9rem;
    padding: 0.5rem 0.8rem;
}

.info-item {
    display: flex;
    align-items: flex-start;
    margin-bottom: 1rem;
}

.info-item i {
    font-size: 1.2rem;
    margin-right: 1rem;
    margin-top: 0.2rem;
    width: 20px;
    text-align: center;
}

.info-content {
    flex: 1;
}

.info-content strong {
    display: block;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
}

.info-content p {
    margin: 0;
    color: var(--text-secondary);
}

.amount {
    font-size: 1.2rem !important;
    font-weight: bold !important;
    color: var(--primary-green) !important;
}

.item-info h6 {
    color: var(--text-primary);
}

.order-progress {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.progress-step {
    display: flex;
    align-items: center;
    position: relative;
    opacity: 0.5;
    transition: opacity 0.3s ease;
}

.progress-step.active {
    opacity: 1;
}

.progress-step.current .step-icon {
    background-color: var(--primary-green);
    color: white;
    animation: pulse 2s infinite;
}

.step-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    transition: all 0.3s ease;
}

.progress-step.active .step-icon {
    background-color: var(--light-green);
    color: white;
}

.step-content {
    flex: 1;
}

.step-title {
    margin: 0;
    color: var(--text-primary);
}

.step-connector {
    position: absolute;
    left: 19px;
    top: 40px;
    width: 2px;
    height: 20px;
    background-color: #e9ecef;
    transition: background-color 0.3s ease;
}

.step-connector.active {
    background-color: var(--light-green);
}

@@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
    }
}

.btn-primary {
    background-color: var(--primary-green);
    border-color: var(--primary-green);
}

.btn-primary:hover {
    background-color: var(--hover-green);
    border-color: var(--light-green);
    color: var(--text-primary);
}

.btn-success {
    background-color: var(--light-green);
    border-color: var(--light-green);
}

.btn-success:hover {
    background-color: var(--primary-green);
    border-color: var(--primary-green);
}

.text-primary {
    color: var(--primary-green) !important;
}

.text-success {
    color: var(--primary-green) !important;
}

@@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    .info-item {
        flex-direction: column;
        text-align: center;
    }
    
    .info-item i {
        margin-bottom: 0.5rem;
    }
}
</style>