@{
    ViewData["Title"] = "Reports";
}

<h2 class="mb-4 text-center">üìä System Reports</h2>

<!-- Filters -->
<div class="card shadow-sm mb-3">
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-12 col-md-3">
                <label class="form-label">From</label>
                <input type="date" id="fromDate" class="form-control" />
            </div>
            <div class="col-12 col-md-3">
                <label class="form-label">To</label>
                <input type="date" id="toDate" class="form-control" />
            </div>
            <div class="col-12 col-md-3">
                <button id="resetFilters" class="btn btn-outline-secondary w-100">Reset</button>
            </div>
        </div>
    </div>
</div>

<!-- Overview Cards -->
<div id="overview-cards" class="row g-3 mb-4">
    <div class="col-md-3 col-6">
        <div class="card shadow-sm text-center p-3">
            <div class="text-muted small">Total Orders</div>
            <div id="kpiOrders" class="fs-2 fw-bold text-primary">0</div>
        </div>
    </div>
    <div class="col-md-3 col-6">
        <div class="card shadow-sm text-center p-3">
            <div class="text-muted small">Total Revenue</div>
            <div id="kpiRevenue" class="fs-2 fw-bold text-success">$0</div>
        </div>
    </div>
    <div class="col-md-3 col-6">
        <div class="card shadow-sm text-center p-3">
            <div class="text-muted small">New Users</div>
            <div id="kpiUsers" class="fs-2 fw-bold text-warning">0</div>
        </div>
    </div>
    <div class="col-md-3 col-6">
        <div class="card shadow-sm text-center p-3">
            <div class="text-muted small">Pending Orders</div>
            <div id="kpiPending" class="fs-2 fw-bold text-danger">0</div>
        </div>
    </div>
</div>

<!-- Charts -->
<div id="charts-section" class="row g-3 mb-4">
    <div class="col-12 col-lg-7">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h5 class="card-title mb-3">Revenue Trend</h5>
                <canvas id="revenueChart" height="120"></canvas>
            </div>
        </div>
    </div>
    <div class="col-12 col-lg-5">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h5 class="card-title mb-3">Orders Trend</h5>
                <canvas id="ordersChart" height="120"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Data Table -->
<div id="reports-table" class="card shadow-sm">
    <div class="card-body">
        <h5 class="card-title">Sales Summary</h5>
        <div class="table-responsive">
            <table id="reportsTable" class="table table-striped table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Date</th>
                            <th>Orders</th>
                            <th>Revenue</th>
                            <th>Growth Rate</th>
                            <th>Trend</th>
                    </tr>
                </thead>
                <tbody id="tbodyData">
                    @* Rendered by JS *@
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <!-- DataTables + Buttons (full import to avoid conflicts, keep 5) -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

    <!-- Chart.js (full import to avoid conflicts) -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // -------- Cache Management --------
        const CACHE_PREFIX = 'reports_cache_';
        const CACHE_DURATION = 5 * 60 * 1000; // 5-minute cache
        
        function getCacheKey(startDate, endDate) {
            return `${CACHE_PREFIX}${startDate}_${endDate}`;
        }
        
        function getFromCache(key) {
            try {
                const cached = localStorage.getItem(key);
                if (cached) {
                    const data = JSON.parse(cached);
                    if (Date.now() - data.timestamp < CACHE_DURATION) {
                        return data.value;
                    } else {
                        localStorage.removeItem(key);
                    }
                }
            } catch (e) {
                console.warn('Cache read failed:', e);
            }
            return null;
        }
        
        function setToCache(key, value) {
            try {
                const data = {
                    value: value,
                    timestamp: Date.now()
                };
                localStorage.setItem(key, JSON.stringify(data));
            } catch (e) {
                console.warn('Cache storage failed:', e);
            }
        }
        
        // -------- Lazy Loading Management --------
        let isLoading = false;
        let loadedSections = new Set();
        
        function showLoadingSpinner(containerId) {
            const container = document.getElementById(containerId);
            if (container) {
                container.innerHTML = '<div class="text-center p-4"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            }
        }
        
        // -------- Data (Single Source of Truth) --------
        const currency = 'USD'; // Or change to NZD: 'NZD'
        let reportData = null;

        // -------- ÂºÇÊ≠•Êï∞ÊçÆÂä†ËΩΩ --------
        async function loadReportData(startDate, endDate) {
            if (isLoading) return null;
            
            const cacheKey = getCacheKey(startDate || '', endDate || '');
            
            // Â∞ùËØï‰ªéÁºìÂ≠òËé∑Âèñ
            const cachedData = getFromCache(cacheKey);
            if (cachedData) {
                console.log('‰ªéÁºìÂ≠òÂä†ËΩΩÊï∞ÊçÆ');
                return cachedData;
            }
            
            isLoading = true;
            try {
                const params = new URLSearchParams();
                if (startDate) params.append('startDate', startDate);
                if (endDate) params.append('endDate', endDate);
                
                const response = await fetch(`/api/ReportsApi/admin-dashboard-data?${params}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                // Â≠òÂÇ®Âà∞ÁºìÂ≠ò
                setToCache(cacheKey, data);
                
                console.log('‰ªéAPIÂä†ËΩΩÊï∞ÊçÆ');
                return data;
            } catch (error) {
                console.error('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•:', error);
                return null;
            } finally {
                isLoading = false;
            }
        }
        
        // -------- ÊáíÂä†ËΩΩÂáΩÊï∞ --------
        async function lazyLoadSection(sectionId, loadFunction) {
            if (loadedSections.has(sectionId)) return;
            
            showLoadingSpinner(sectionId);
            
            try {
                await loadFunction();
                loadedSections.add(sectionId);
            } catch (error) {
                console.error(`Âä†ËΩΩ${sectionId}Â§±Ë¥•:`, error);
                document.getElementById(sectionId).innerHTML = '<div class="alert alert-danger">Âä†ËΩΩÂ§±Ë¥•ÔºåËØ∑ÈáçËØï</div>';
            }
        }
        
        // -------- Helpers --------
        const fmtCurrency = (n) => new Intl.NumberFormat(undefined, { style: 'currency', currency }).format(n);
        const parseDate = (s) => new Date(s + 'T00:00:00');

        // -------- Êï∞ÊçÆÂ§ÑÁêÜÂáΩÊï∞ --------
        function updateOverviewCards(data) {
            if (!data || !data.overview) return;
            
            const overview = data.overview;
            document.getElementById('kpiOrders').textContent = overview.totalOrders || 0;
            document.getElementById('kpiRevenue').textContent = fmtCurrency(overview.totalRevenue || 0);
            document.getElementById('kpiUsers').textContent = overview.avgOrderValue ? fmtCurrency(overview.avgOrderValue) : '$0';
            document.getElementById('kpiPending').textContent = overview.topProduct || 'ÊöÇÊó†Êï∞ÊçÆ';
        }

        function renderTable(data) {
            const tbody = document.getElementById('tbodyData');
            
            if (!data || !data.dailyData || !Array.isArray(data.dailyData)) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center">ÊöÇÊó†Êï∞ÊçÆ</td></tr>';
                return;
            }

            tbody.innerHTML = data.dailyData.map(r => `
                    <tr>
                        <td>${r.date}</td>
                        <td>${r.orders || 0}</td>
                        <td>${fmtCurrency(r.revenue || 0)}</td>
                        <td>${r.growth ? (r.growth > 0 ? '+' : '') + r.growth.toFixed(1) + '%' : '0%'}</td>
                        <td><span class="badge ${r.growth > 0 ? 'bg-success' : r.growth < 0 ? 'bg-danger' : 'bg-secondary'}">${r.growth > 0 ? '‰∏äÂçá' : r.growth < 0 ? '‰∏ãÈôç' : 'ÊåÅÂπ≥'}</span></td>
                    </tr>
                `).join('');
        }

        function updateKPIs(data) {
            const sum = (key) => data.reduce((a, b) => a + (b[key] ?? 0), 0);
            document.getElementById('kpiOrders').textContent = sum('orders').toLocaleString();
            document.getElementById('kpiRevenue').textContent = fmtCurrency(sum('revenue'));
            document.getElementById('kpiUsers').textContent = sum('users').toLocaleString();
            document.getElementById('kpiPending').textContent = sum('pending').toLocaleString();
        }

        let dt; // DataTable instance
        let revenueChart, ordersChart;

        function initDataTable() {
            if (dt) { dt.destroy(); }
            dt = $('#reportsTable').DataTable({
                pageLength: 10,
                order: [[0, 'desc']],
                dom: 'Bfrtip',
                buttons: [
                    { extend: 'csv', title: 'reports' },
                    { extend: 'excel', title: 'reports' },
                    { extend: 'print', title: 'System Reports' }
                ],
                columnDefs: [
                    { targets: 0, type: 'date' }
                ]
            });
        }

        async function renderCharts(data) {
            if (!data || !data.dailyData || !Array.isArray(data.dailyData)) {
                console.warn('ÂõæË°®Êï∞ÊçÆÊó†Êïà');
                return;
            }

            const labels = data.dailyData.map(r => r.date);
            const revenue = data.dailyData.map(r => r.revenue || 0);
            const orders = data.dailyData.map(r => r.orders || 0);

            // Destroy old charts
            if (revenueChart) revenueChart.destroy();
            if (ordersChart) ordersChart.destroy();

            // Revenue line chart (with gradient)
            const ctx1 = document.getElementById('revenueChart')?.getContext('2d');
            if (ctx1) {
                const grad = ctx1.createLinearGradient(0, 0, 0, 200);
                grad.addColorStop(0, 'rgba(76, 175, 80, 0.35)');  // brand green-ish
                grad.addColorStop(1, 'rgba(76, 175, 80, 0.05)');

                revenueChart = new Chart(ctx1, {
                    type: 'line',
                    data: {
                        labels,
                        datasets: [{
                            label: `Êî∂ÂÖ• (${currency})`,
                            data: revenue,
                            fill: true,
                            backgroundColor: grad,
                            borderColor: 'rgba(76, 175, 80, 1)',
                            tension: 0.3,
                            pointRadius: 3
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: { 
                            legend: { position: 'top' },
                            title: {
                                display: true,
                                text: 'Êî∂ÂÖ•Ë∂ãÂäø'
                            }
                        },
                        scales: {
                            y: {
                                ticks: {
                                    callback: (v) => fmtCurrency(v)
                                }
                            }
                        }
                    }
                });
            }

            // Orders bar chart
            const ctx2 = document.getElementById('ordersChart')?.getContext('2d');
            if (ctx2) {
                ordersChart = new Chart(ctx2, {
                    type: 'bar',
                    data: {
                        labels,
                        datasets: [{
                            label: 'ËÆ¢ÂçïÊï∞',
                            data: orders,
                            backgroundColor: 'rgba(33, 150, 243, 0.35)',
                            borderColor: 'rgba(33, 150, 243, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: { 
                            legend: { position: 'top' },
                            title: {
                                display: true,
                                text: 'ËÆ¢ÂçïË∂ãÂäø'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { precision: 0 }
                            }
                        }
                    }
                });
            }
        }

        async function refreshAll() {
            const startDate = document.getElementById('fromDate').value;
            const endDate = document.getElementById('toDate').value;
            
            // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
            showLoadingSpinner('overview-cards');
            showLoadingSpinner('reports-table');
            showLoadingSpinner('charts-section');
            
            try {
                // Âä†ËΩΩÊï∞ÊçÆ
                reportData = await loadReportData(startDate, endDate);
                
                if (reportData) {
                    // Êõ¥Êñ∞Ê¶ÇËßàÂç°Áâá
                    updateOverviewCards(reportData);
                    
                    // Ê∏≤ÊüìË°®Ê†º
                    renderTable(reportData);
                    
                    // ÈáçÊñ∞ÂàùÂßãÂåñDataTable
                    const table = $('#reportsTable');
                    if ($.fn.DataTable.isDataTable(table)) {
                        table.DataTable().destroy();
                    }
                    table.DataTable({
                        pageLength: 10,
                        order: [[0, 'desc']],
                        language: {
                            url: '//cdn.datatables.net/plug-ins/1.13.4/i18n/zh.json'
                        }
                    });
                    
                    // ÊáíÂä†ËΩΩÂõæË°®
                    await lazyLoadSection('charts-section', async () => {
                        await renderCharts(reportData);
                    });
                } else {
                    throw new Error('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('Âà∑Êñ∞Â§±Ë¥•:', error);
                // ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
                document.getElementById('overview-cards').innerHTML = '<div class="alert alert-danger">Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑ÈáçËØï</div>';
            }
        }

        // -------- ‰∫§ÂèâËßÇÂØüÂô®ÔºàÊáíÂä†ËΩΩÔºâ --------
        function setupIntersectionObserver() {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const sectionId = entry.target.id;
                        if (sectionId === 'charts-section' && reportData) {
                            lazyLoadSection(sectionId, async () => {
                                await renderCharts(reportData);
                            });
                        }
                    }
                });
            }, {
                threshold: 0.1
            });
            
            // ËßÇÂØüÂõæË°®Âå∫Âüü
            const chartsSection = document.getElementById('charts-section');
            if (chartsSection) {
                observer.observe(chartsSection);
            }
        }
        
        // -------- Page Init --------
        $(document).ready(async function() {
            // Set default dates (last 7 days)
            const today = new Date();
            const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            document.getElementById('fromDate').value = weekAgo.toISOString().split('T')[0];
            document.getElementById('toDate').value = today.toISOString().split('T')[0];

            // ËÆæÁΩÆ‰∫§ÂèâËßÇÂØüÂô®
            setupIntersectionObserver();

            // Bind events
            document.getElementById('fromDate').addEventListener('change', refreshAll);
            document.getElementById('toDate').addEventListener('change', refreshAll);
            document.getElementById('resetFilters').addEventListener('click', function() {
                document.getElementById('fromDate').value = weekAgo.toISOString().split('T')[0];
                document.getElementById('toDate').value = today.toISOString().split('T')[0];
                refreshAll();
            });

            // Initial load
            await refreshAll();
        });
    </script>
}
