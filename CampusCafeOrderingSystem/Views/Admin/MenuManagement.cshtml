@model IEnumerable<CampusCafeOrderingSystem.Models.MenuItem>
@{
    ViewData["Title"] = "Menu Management - Admin";
}

<div class="admin-menu-container">
    <div class="page-header">
        <h1>Menu Management</h1>
        <p class="text-muted">View and manage all menu items across all vendors</p>
    </div>

    <!-- Search and Filters -->
    <div class="search-filters">
        <div class="search-box">
            <input type="text" id="searchInput" class="form-control" placeholder="Search menu items...">
            <button class="btn btn-outline-secondary" onclick="searchMenuItems()">Search</button>
        </div>
        <div class="filter-box">
            <select id="categoryFilter" class="form-select" onchange="filterByCategory()">
                <option value="">All Categories</option>
                <option value="coffee">Coffee</option>
                <option value="tea">Tea</option>
                <option value="dessert">Dessert</option>
                <option value="snack">Snack</option>
            </select>
            <select id="statusFilter" class="form-select" onchange="filterByStatus()">
                <option value="">All Status</option>
                <option value="available">Available</option>
                <option value="unavailable">Unavailable</option>
            </select>
        </div>
    </div>

    <!-- Menu Items Table -->
    <div class="menu-table-container">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Vendor</th>
                    <th>Description</th>
                    <th>Created</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="menuTableBody">
                @if (Model != null && Model.Any())
                {
                    @foreach (var item in Model)
                    {
                        <tr data-category="@item.Category" data-status="@(item.IsAvailable ? "available" : "unavailable")">
                            <td>
                                @if (!string.IsNullOrEmpty(item.ImageUrl))
                                {
                                    <img src="@item.ImageUrl" alt="@item.Name" class="menu-item-thumb">
                                }
                                else
                                {
                                    <div class="no-image">No Image</div>
                                }
                            </td>
                            <td class="fw-bold">@item.Name</td>
                            <td>
                                <span class="badge bg-secondary">@item.Category</span>
                            </td>
                            <td class="text-success fw-bold">NZ$@item.Price.ToString("F2")</td>
                            <td>
                                @if (item.IsAvailable)
                                {
                                    <span class="badge bg-success">Available</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Unavailable</span>
                                }
                            </td>
                            <td>
                                <span class="badge bg-info">@item.VendorEmail</span>
                            </td>
                            <td class="description-cell">
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    <span title="@item.Description">@(item.Description.Length > 50 ? item.Description.Substring(0, 50) + "..." : item.Description)</span>
                                }
                                else
                                {
                                    <span class="text-muted">No description</span>
                                }
                            </td>
                            <td>@item.CreatedAt.ToString("yyyy-MM-dd")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteMenuItem(@item.Id)" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9" class="text-center py-5">
                            <h5 class="text-muted">No menu items found</h5>
                            <p class="text-muted">Menu items will appear here when vendors add them.</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this menu item?</p>
                <p class="text-danger"><strong>This action cannot be undone.</strong></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<style>
.admin-menu-container {
    padding: 20px;
    background: #F9F9F9;
    min-height: 100vh;
}

.page-header {
    background: white;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.search-filters {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
    flex-wrap: wrap;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.search-box {
    display: flex;
    gap: 10px;
    flex: 1;
    min-width: 300px;
}

.filter-box {
    display: flex;
    gap: 10px;
}

.menu-table-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    overflow: hidden;
}

.menu-item-thumb {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 8px;
}

.no-image {
    width: 60px;
    height: 60px;
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    color: #6c757d;
    text-align: center;
}

.description-cell {
    max-width: 200px;
}

.table th {
    border-top: none;
    font-weight: 600;
}

.btn-sm {
    margin-right: 5px;
}

.badge {
    font-size: 0.75em;
}
</style>

<script>
function searchMenuItems() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const rows = document.querySelectorAll('#menuTableBody tr');
    
    rows.forEach(row => {
        const name = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
        const description = row.querySelector('td:nth-child(6)').textContent.toLowerCase();
        
        if (name.includes(searchTerm) || description.includes(searchTerm)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

function filterByCategory() {
    const category = document.getElementById('categoryFilter').value;
    const rows = document.querySelectorAll('#menuTableBody tr');
    
    rows.forEach(row => {
        if (!category || row.dataset.category === category) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

function filterByStatus() {
    const status = document.getElementById('statusFilter').value;
    const rows = document.querySelectorAll('#menuTableBody tr');
    
    rows.forEach(row => {
        if (!status || row.dataset.status === status) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

let itemToDelete = null;

function deleteMenuItem(id) {
    itemToDelete = id;
    const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
    modal.show();
}

function confirmDelete() {
    if (itemToDelete) {
        fetch(`/api/admin/menu/${itemToDelete}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (response.ok) {
                // Remove the row from the table
                const row = document.querySelector(`tr[data-id="${itemToDelete}"]`);
                if (row) {
                    row.remove();
                }
                alert('Menu item deleted successfully');
                // Reload the page to refresh the data
                location.reload();
            } else {
                throw new Error('Failed to delete menu item');
            }
        })
        .catch(error => {
            console.error('Error deleting menu item:', error);
            alert('Failed to delete menu item. Please try again.');
        })
        .finally(() => {
            itemToDelete = null;
            bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
        });
    }
}

// Add event listener for the confirm delete button
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('confirmDeleteBtn').addEventListener('click', confirmDelete);
});



// Search on Enter key
document.getElementById('searchInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        searchMenuItems();
    }
});
</script>

@Html.AntiForgeryToken()