@model List<CampusCafeOrderingSystem.Models.Order>
@{
    ViewData["Title"] = "My Orders";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <!-- Hero Section -->
    <div class="orders-hero text-center">
        <div class="container">
            <h1><i class="fas fa-receipt me-3"></i>My Orders</h1>
            <p>Track your orders and view your order history</p>
        </div>
    </div>
    
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="text-primary mb-0">
                    <i class="fas fa-list me-2"></i> Order History
                </h3>
                <a asp-controller="Menu" asp-action="Index" class="btn btn-success">
                    <i class="fas fa-utensils me-2"></i> Continue Shopping
                </a>
            </div>
            
            @if (Model.Any())
            {
                <div class="row">
                    @foreach (var order in Model)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card order-card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0 text-primary">@order.OrderNumber</h6>
                                    <span class="badge badge-@GetStatusClass(order.Status)">@order.Status</span>
                                </div>
                                <div class="card-body">
                                    <div class="order-info">
                                        <p class="mb-2">
                                            <i class="fas fa-calendar text-muted"></i>
                                            <small>@order.OrderDate.ToString("yyyy-MM-dd HH:mm")</small>
                                        </p>
                                        <p class="mb-2">
                                            <i class="fas fa-credit-card text-muted"></i>
                                            <small>@GetPaymentMethodDisplay(order.PaymentMethod)</small>
                                        </p>
                                        <p class="mb-3">
                                            <i class="fas fa-dollar-sign text-success"></i>
                                            <strong>¥@order.TotalAmount.ToString("F2")</strong>
                                        </p>
                                    </div>
                                    
                                    <div class="order-items">
                                        <h6 class="text-muted mb-2">Items (@order.OrderItems.Count):</h6>
                                        @foreach (var item in order.OrderItems.Take(2))
                                        {
                                            <div class="item-summary">
                                                <span class="item-name">@item.MenuItemName</span>
                                                <span class="item-qty">×@item.Quantity</span>
                                            </div>
                                        }
                                        @if (order.OrderItems.Count > 2)
                                        {
                                            <small class="text-muted">and @(order.OrderItems.Count - 2) more...</small>
                                        }
                                    </div>
                                    
                                    @if (order.Status == CampusCafeOrderingSystem.Models.OrderStatus.Preparing && order.EstimatedCompletionTime.HasValue)
                                    {
                                        <div class="estimated-time mt-3">
                                            <div class="alert alert-info py-2">
                                                <i class="fas fa-clock"></i>
                                                <small>Estimated ready: @order.EstimatedCompletionTime.Value.ToString("HH:mm")</small>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="card-footer">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <a asp-action="Details" asp-route-id="@order.Id" class="btn btn-outline-primary btn-sm">
                                                <i class="fas fa-eye"></i> View Details
                                            </a>
                                            @if (order.Status != CampusCafeOrderingSystem.Models.OrderStatus.Completed)
                                            {
                                                <a asp-action="Track" asp-route-orderNumber="@order.OrderNumber" class="btn btn-outline-info btn-sm">
                                                    <i class="fas fa-search"></i> Track Order
                                                </a>
                                            }
                                        </div>
                                        @if (order.Status == CampusCafeOrderingSystem.Models.OrderStatus.Completed)
                                        {
                                            <div>
                                                <span class="badge bg-success me-2">
                                                    <i class="fas fa-check"></i> Completed
                                </span>
                                <a asp-action="Details" asp-route-id="@order.Id" class="btn btn-success btn-sm" title="Add Review">
                                    <i class="fas fa-star"></i> Review
                                                </a>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="empty-state">
                        <i class="fas fa-shopping-cart fa-4x text-muted mb-3"></i>
                        <h4 class="text-muted">No Orders Yet</h4>
                        <p class="text-muted mb-4">You haven't placed any orders yet. Start shopping to see your orders here!</p>
                        <a asp-controller="Menu" asp-action="Index" class="btn btn-success btn-lg">
                            <i class="fas fa-utensils"></i> Start Shopping
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rate Your Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="reviewItems">
                    <!-- Dynamic review items will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="submitReviews()">Submit Reviews</button>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusClass(CampusCafeOrderingSystem.Models.OrderStatus status)
{
    return status switch
    {
        CampusCafeOrderingSystem.Models.OrderStatus.Pending => "warning",
        CampusCafeOrderingSystem.Models.OrderStatus.Confirmed => "info",
        CampusCafeOrderingSystem.Models.OrderStatus.Preparing => "primary",
        CampusCafeOrderingSystem.Models.OrderStatus.Ready => "success",
        CampusCafeOrderingSystem.Models.OrderStatus.Completed => "secondary",
        CampusCafeOrderingSystem.Models.OrderStatus.Cancelled => "danger",
        _ => "secondary"
    };
}
    
    string GetPaymentMethodDisplay(string paymentMethod)
    {
        return paymentMethod switch
        {
            "CreditCard" => "Credit/Debit Card",
            "CampusCard" => "Campus Card",
            "MobileWallet" => "Mobile Wallet",
            _ => paymentMethod
        };
    }
}

<style>
:root {
    --primary-green: #4CAF50;
    --light-green: #8BC34A;
    --background-gray: #F9F9F9;
    --text-primary: #333333;
    --text-secondary: #777777;
    --hover-green: #C8E6C9;
}

body {
    background-color: var(--background-gray);
}

.orders-hero {
    background: linear-gradient(135deg, var(--primary-green), var(--light-green));
    color: white;
    padding: 3rem 0;
    margin-bottom: 2rem;
    border-radius: 15px;
}

.orders-hero h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.orders-hero p {
    font-size: 1.1rem;
    opacity: 0.9;
}

.order-card {
    border: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    background-color: white;
    border-radius: 15px;
    overflow: hidden;
}

.order-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.order-card .card-header {
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border-bottom: 2px solid var(--primary-green);
    padding: 1rem 1.25rem;
}

.order-card .card-body {
    padding: 1.5rem 1.25rem;
}

.order-card .card-footer {
    background-color: #f8f9fa;
    border-top: 1px solid #e9ecef;
    padding: 1rem 1.25rem;
}

.order-info {
    margin-bottom: 1.5rem;
}

.order-info p {
    margin-bottom: 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.order-info i {
    width: 16px;
    text-align: center;
}

.order-items {
    background-color: #f8f9fa;
    padding: 1rem;
    border-radius: 10px;
    margin-bottom: 1rem;
}

.order-items h6 {
    color: var(--text-secondary);
    font-weight: 600;
    margin-bottom: 0.75rem;
}

.item-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e9ecef;
}

.item-summary:last-child {
    border-bottom: none;
}

.item-name {
    font-weight: 500;
    color: var(--text-primary);
}

.item-qty {
    background-color: var(--primary-green);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 15px;
    font-size: 0.85rem;
    font-weight: 600;
}

.estimated-time .alert {
    border-radius: 10px;
    border: none;
    background: linear-gradient(135deg, #d1ecf1, #bee5eb);
    color: #0c5460;
}

.badge {
    font-size: 0.8rem;
    padding: 0.5rem 0.75rem;
    border-radius: 20px;
    font-weight: 600;
}

.badge-warning {
    background-color: #ffc107;
    color: #212529;
}

.badge-info {
    background-color: #17a2b8;
    color: white;
}

.badge-primary {
    background-color: #007bff;
    color: white;
}

.badge-success {
    background-color: var(--primary-green);
    color: white;
}

.badge-secondary {
    background-color: #6c757d;
    color: white;
}

.badge-danger {
    background-color: #dc3545;
    color: white;
}

.empty-state {
    padding: 3rem;
    background-color: white;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
}

.empty-state i {
    color: #dee2e6;
}

.btn {
    border-radius: 25px;
    font-weight: 600;
    transition: all 0.3s ease;
    padding: 0.5rem 1rem;
}

.btn-success {
    background: linear-gradient(135deg, var(--primary-green), var(--light-green));
    border: none;
    box-shadow: 0 2px 10px rgba(76, 175, 80, 0.3);
}

.btn-success:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);
}

.btn-outline-primary {
    border-color: var(--primary-green);
    color: var(--primary-green);
    border-width: 2px;
}

.btn-outline-primary:hover {
    background-color: var(--primary-green);
    border-color: var(--primary-green);
    transform: translateY(-2px);
}

.btn-outline-info {
    border-color: #17a2b8;
    color: #17a2b8;
    border-width: 2px;
}

.btn-outline-info:hover {
    background-color: #17a2b8;
    border-color: #17a2b8;
    transform: translateY(-2px);
}

.btn-lg {
    padding: 0.75rem 2rem;
    font-size: 1.1rem;
}

@@media (max-width: 768px) {
    .orders-hero {
        padding: 2rem 0;
    }
    
    .orders-hero h1 {
        font-size: 2rem;
    }
    
    .order-card .card-body {
        padding: 1rem;
    }
    
    .order-card .card-footer {
        padding: 0.75rem 1rem;
    }
    
    .btn-sm {
        font-size: 0.8rem;
        padding: 0.375rem 0.75rem;
    }
}

.order-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0,0,0,0.15);
}

.order-card .card-header {
    background-color: var(--primary-green);
    color: white;
    border-bottom: none;
}

.order-card .card-header .badge {
    font-size: 0.75rem;
}

.badge-warning {
    background-color: #ffc107;
    color: #212529;
}

.badge-info {
    background-color: #17a2b8;
}

.badge-primary {
    background-color: #007bff;
}

.badge-success {
    background-color: var(--primary-green);
}

.badge-secondary {
    background-color: #6c757d;
}

.badge-danger {
    background-color: #dc3545;
}

.order-info p {
    margin-bottom: 0.5rem;
}

.order-info i {
    width: 16px;
    margin-right: 8px;
}

.item-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2px 0;
    font-size: 0.9rem;
}

.item-name {
    color: var(--text-primary);
    flex: 1;
}

.item-qty {
    color: var(--text-secondary);
    font-weight: 500;
}

.estimated-time .alert {
    margin-bottom: 0;
}

.btn-outline-primary {
    border-color: var(--primary-green);
    color: var(--primary-green);
}

.btn-outline-primary:hover {
    background-color: var(--primary-green);
    border-color: var(--primary-green);
}

.btn-outline-info {
    border-color: var(--light-green);
    color: var(--light-green);
}

.btn-outline-info:hover {
    background-color: var(--light-green);
    border-color: var(--light-green);
}

.btn-success {
    background-color: var(--primary-green);
    border-color: var(--primary-green);
}

.btn-success:hover {
    background-color: var(--hover-green);
    border-color: var(--light-green);
    color: var(--text-primary);
}

.text-primary {
    color: var(--primary-green) !important;
}

.empty-state {
    padding: 3rem 1rem;
}

.empty-state i {
    opacity: 0.5;
}

@@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    .order-card {
        margin-bottom: 1rem;
    }
}

/* Review Modal Styles */
.review-item {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
}

.review-item h6 {
    color: var(--text-primary);
    margin-bottom: 10px;
}

.rating-stars {
    display: flex;
    gap: 5px;
    margin-bottom: 10px;
}

.rating-stars .star {
    font-size: 24px;
    color: #ddd;
    cursor: pointer;
    transition: color 0.2s ease;
}

.rating-stars .star.active,
.rating-stars .star:hover {
    color: #ffc107;
}

.review-comment {
    width: 100%;
    min-height: 80px;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 8px;
    font-family: inherit;
    resize: vertical;
}

.review-comment:focus {
    outline: none;
    border-color: var(--primary-green);
}
</style>

<script>
let currentOrderId = null;
let reviewData = [];

function openReviewModal(orderId) {
    currentOrderId = orderId;
    loadOrderItems(orderId);
    const modal = new bootstrap.Modal(document.getElementById('reviewModal'));
    modal.show();
}

async function loadOrderItems(orderId) {
    try {
        const response = await fetch(`/api/order/my-orders/${orderId}`);
        if (!response.ok) {
            throw new Error('Failed to load order details');
        }
        
        const orderData = await response.json();
        renderReviewItems(orderData.items);
    } catch (error) {
        console.error('Failed to load order items:', error);
            alert('Failed to load order items, please try again');
    }
}

function renderReviewItems(orderItems) {
    const container = document.getElementById('reviewItems');
    reviewData = [];
    
    container.innerHTML = orderItems.map((item, index) => `
        <div class="review-item">
            <h6>${item.menuItem?.name || item.itemName}</h6>
            <span class="price">¥${item.unitPrice.toFixed(2)} × ${item.quantity}</span>
            <div class="rating-stars" data-item-index="${index}">
                ${[1, 2, 3, 4, 5].map(star => 
                    `<span class="star" data-rating="${star}" onclick="setRating(${index}, ${star})">★</span>`
                ).join('')}
            </div>
            <textarea class="review-comment" 
                      placeholder="Please share your dining experience..." 
                      data-item-index="${index}"
                      onchange="updateComment(${index}, this.value)"
                      maxlength="500"></textarea>
        </div>
    `).join('');
    
    // Initialize review data
    orderItems.forEach((item, index) => {
        reviewData[index] = {
            menuItemId: item.menuItemId,
            rating: 0,
            comment: ''
        };
    });
}

function setRating(itemIndex, rating) {
    reviewData[itemIndex].rating = rating;
    
    const stars = document.querySelectorAll(`[data-item-index="${itemIndex}"] .star`);
    stars.forEach((star, index) => {
        if (index < rating) {
            star.classList.add('active');
        } else {
            star.classList.remove('active');
        }
    });
}

function updateComment(itemIndex, comment) {
    reviewData[itemIndex].comment = comment;
}

async function submitReviews() {
    // Validate that all items have ratings
    const invalidItems = reviewData.filter(item => item.rating === 0);
    if (invalidItems.length > 0) {
        alert('Please rate at least one item');
        return;
    }
    
    try {
        const response = await fetch('/api/review/submit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                reviews: reviewData
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            alert('Review submitted successfully!');
            const modal = bootstrap.Modal.getInstance(document.getElementById('reviewModal'));
            modal.hide();
            
            // Hide the review button for this order
            const reviewBtn = document.querySelector(`[onclick="openReviewModal(${currentOrderId})"]`);
            if (reviewBtn) {
                reviewBtn.style.display = 'none';
                // Add a "Reviewed" badge
                const cardFooter = reviewBtn.closest('.card-footer');
                if (cardFooter) {
                    const reviewedBadge = document.createElement('span');
                    reviewedBadge.className = 'badge bg-success';
                    reviewedBadge.textContent = 'Reviewed';
                    cardFooter.appendChild(reviewedBadge);
                }
            }
        } else {
            const error = await response.json();
            alert(error.error || 'Failed to submit review');
        }
    } catch (error) {
        console.error('Failed to submit review:', error);
        alert('Failed to submit review, please try again');
    }
}
</script>